<?xml version="1.0"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <!--字符集编码-->
    <property name="charset" value="UTF-8" />
    <!--违规级别-->
    <property name="severity" value="warning" />
    <!--可接受的文件扩展名-->
    <property name="fileExtensions" value="java, kt, xml" />
    <!--检查文件是否包含制表符-->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile" />

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation" />

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength">
        <property name="max" value="10000" />
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
        <property name="format" value="[^\*]\s+$" />
        <property name="minimum" value="0" />
        <property name="maximum" value="0" />
        <property name="message" value="Line has trailing spaces." />
    </module>

    <!--检查Java源文件并定义一些适用于检查此类文件的一些属性-->
    <module name="TreeWalker">
        <!--Empty catch block. 检查空的 catch块, 需要把异常堆栈打印出来, 方便定位原因 -->
        <module name="EmptyCatchBlock" />

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="GenericWhitespace"/>
        <!--空格不能作为for循环迭代器空位置的填充符-->
        <module name="EmptyForIteratorPad"/>
        <!--方法左右括号和参数之间不能有空格-->
        <module name="MethodParamPad"/>
        <!--检查指定标记之后没有空格-->
        <module name="NoWhitespaceAfter"/>
        <!--指定标记之前没有空格-->
        <module name="NoWhitespaceBefore"/>
        <!--运算符换行-->
        <module name="OperatorWrap"/>
        <!--左右()之间不能有空格-->
        <module name="ParenPad"/>
        <!--类型转换后应有空格-->
        <module name="TypecastParenPad"/>
        <!--指定标记之后有空格-->
        <module name="WhitespaceAfter"/>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <!--避免嵌套代码块-->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true" />
        </module>
        <!--空代码块-->
        <module name="EmptyBlock">
            <property name="option" value="text" />
        </module>

        <!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示
          maxLineLength: 大括号'{'所在行行最多容纳的字符数
          tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->
        <module name="LeftCurly">
            <property name="option" value="eol" />
        </module>
        <!--需要花括号：可以检查do、else、if、for、while等关键字所控制的代码块-->
        <module name="NeedBraces" />
        <!-- Checks the placement of right curly braces ('}') for  else, try, and catch tokens. The policy to verify is specified using property  option.
          option: 右大括号是否单独一行显示
          tokens: 定义检查的类型  -->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone" />
            <property name="option" value="alone" />
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
        </module>

        <module name="InnerAssignment" />
        <module name="SimplifyBooleanReturn" />

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="HideUtilityClassConstructor" />

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle" />
        <module name="UpperEll" />
        <!-- 代码缩进 -->
        <module name="Indentation">
            <property name="basicOffset" value="4" />
            <property name="caseIndent" value="4" />
        </module>

        <!--Default should be last label in the switch. switch 中default的位置检查，在所有case下面-->
        <module name="DefaultComesLast" />

        <!--空行检查  一行 ; -->
        <module name="EmptyStatement" />

        <!--String literal expressions should be on the left side of an equals comparison. 使用 equals 时 避免出现null 如  str.equls("xx") 正确使用 "xx".equls(str) -->
        <module name="EqualsAvoidNull" />

        <!--检查 重写equals方法时是否有重写hashCode方法-->
        <module name="EqualsHashCode" />

        <!--检查 switch 语句 中 case 代码块是否包含 break, return, throw or continue-->
        <module name="FallThrough" />

        <!--检查switch 是否包含 default-->
        <module name="MissingSwitchDefault" />

        <!--检查同个文件中是否出现多个同样的字面量-->
        <!--<module name="MultipleStringLiterals" />-->

        <!-- 每一行只能定义一个变量  如 Button b1,b2,b3; -->
        <module name="MultipleVariableDeclarations" />

        <!-- if-else嵌套语句个数 最多5层 -->
        <module name="NestedIfDepth">
            <property name="max" value="5" />
        </module>

        <!-- try-catch 嵌套语句个数 最多2层 -->
        <module name="NestedTryDepth">
            <property name="max" value="2" />
        </module>

        <!-- 一行只允许一条语句，即末尾一个 ; -->
        <module name="OneStatementPerLine" />

        <!--  Checks for overly complicated boolean expressions. Currently finds code like  if (b == true), b || true, !false, etc.
            检查boolean值是否冗余的地方.Expression can be simplified.
            Rationale: Complex boolean logic makes code hard to understand and maintain. -->
        <module name="SimplifyBooleanExpression" />

        <!--字符串比较检查，字符串比较用equals-->
        <module name="StringLiteralEquality" />

        <!--检查 重写的 clone 方法是否调用了 super.clone()-->
        <module name="SuperClone" />

        <!--检查 重写的 finalize 方法是否调用了 super.finalize()-->
        <module name="SuperFinalize" />

        <!--Unnecessary parentheses around expression. 检查多余的圆括号-->
        <module name="UnnecessaryParentheses" />

<!--        &lt;!&ndash; 每行字符数 &ndash;&gt;-->
<!--        <module name="LineLength">-->
<!--            <property name="max" value="200" />-->
<!--        </module>-->

        <!-- Checks for long methods and constructors. max default 150行. max=500 设置长度200 -->
        <module name="MethodLength">
            <property name="max" value="200" />
        </module>

        <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
        <module name="ModifierOrder" />

        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
        <module name="RedundantModifier" />

        <!-- Checks the number of parameters of a method or constructor. max default 7个. -->
        <module name="ParameterNumber">
            <property name="max" value="9" />
        </module>

        <!--  Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification,  Section 3.10.1.
            检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。Should use uppercase 'L'.
            looks a lot like 1. -->
        <module name="UpperEll" />

        <!-- A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. To check for other patterns in Java comments, set property format.
             检查是否存在TODO（待处理） TODO是javaIDE自动生成的。一般代码写完后要去掉。Comment matches to-do format 'TODO:'.
           -->
        <module name="TodoComment" />

        <!-- Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])
            检查再定义数组时，采用java风格还是c风格，例如：int[] num是java风格，int num[]是c风格。默认是java风格-->
        <module name="ArrayTypeStyle" />

        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport" />

        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport" /> <!-- defaults to sun.* packages -->

        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport" />

        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports" />

        <!--5.命名规范检查-->
        <!-- local, final variables, including catch parameters -->
        <module name="LocalFinalVariableName" />

        <!-- local, non-final variables, including catch parameters-->
        <module name="LocalVariableName" />

        <!-- 静态变量命名  不能有小写字母，长度(0,39) -->
        <module name="StaticVariableName">
            <property name="format" value="(^s[A-Z][a-zA-Z0-9]{0,39}$)" />
        </module>

        <!-- 包命名  小写字母开头 -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
        </module>

        <!-- 类的命名,匹配规则默认:(^[A-Z][a-zA-Z0-9]*$),必须以大写字母开始 -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,39}$)" />
            <property name="tokens" value="CLASS_DEF" />
        </module>

        <!-- 接口命名,匹配规则:(^I[A-Z][a-zA-Z0-9]*$),必须以大写I开始 -->
        <module name="TypeName">
            <property name="format" value="^I[A-Z][a-zA-Z0-9]*$" />
            <property name="tokens" value="INTERFACE_DEF" />
        </module>

        <!-- 方法命名  小写字母开头，长度(0,39) -->
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,39}$)" />
        </module>

        <!-- 检查参数 小写字母开头 长度(0,39) -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,39}$)" />
        </module>

        <!-- 成员变量命名  小写字母开头，长度(0,39) -->
<!--        <module name="MemberName">-->
<!--            <property name="format" value="(^m[A-Z][a-zA-Z0-9]{0,39}$)" />-->
<!--            <message key="name.invalidPattern"-->
<!--                value="Member ''{0}'' must start with a lowercase ''m'' (checked pattern ''{1}'')." />-->
<!--        </module>-->

        <!-- 常量命名  不能有小写字母，长度(0,39) -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z0-9_]{0,39}$)" />
        </module>

    </module>

</module>
